1 - With: int, constant.value
constant const;
Select BOOLEAN with 1234 = const.value
TRUE
5000
2 - With: int, stmt.stmt#
read r;
Select BOOLEAN with 3 = r.stmt#
TRUE
5000
3 - With: int, call.stmt#
call c;
Select BOOLEAN with 8 = c.stmt#
TRUE
5000
4 - With: int, while.stmt#
while w;
Select BOOLEAN with 10 = w.stmt#
TRUE
5000
5 - With: procedure Name: TRUE
procedure p;
Select BOOLEAN with p.procName = "PROC3"
TRUE
5000
6 - With: procedure Name: FALSE
procedure p;
Select BOOLEAN with p.procName = "INVALIDPROC"
FALSE
5000
7 - With: constant value equal if stmt number
constant c; if ifs;
Select c with c.value = ifs.stmt#
11
5000
8 - With: valid stmt number
stmt s;
Select BOOLEAN with s.stmt# = 1
TRUE
5000
9 - With: stmt number not in program
stmt s;
Select BOOLEAN with s.stmt# = 9999
FALSE
5000
10 - With: stmts that are assignment statements
stmt s; assign a;
Select s with s.stmt# = a.stmt#
1, 19, 13, 2, 6, 7, 14, 5, 15, 16, 18, 24
5000
11 - With: comparing variable name with if stmt number (SemanticError)
variable v; if ifs;
Select v with v.varName = ifs.stmt#
SemanticError
5000
12 - With: comparing procedure name with assignment stmt number (SemanticError)
procedure proc; assign a;
Select proc with proc.procName = a.stmt#
SemanticError
5000
13 - With: comparing procedure name with while stmt number (SemanticError)
procedure proc; while w;
Select proc with proc.procName = w.stmt#
SemanticError
5000
14 - With: comparing integer with procedure name (SemanticError)
procedure proc;
Select proc with 1 = proc.procName
SemanticError
5000
15 - With: comparing variable name with print stmt number (SemanticError)
variable var; print p;
Select var with var.varName = p.stmt#
SemanticError
5000
16 - With: compare and get all if statements using with
stmt s; if ifs;
Select s with s.stmt# = ifs.stmt#
11, 12, 17, 4
5000
17 - With: compare and get all call statements using with
stmt s; call c;
Select s with s.stmt# = c.stmt#
22, 20, 21, 23, 8, 9
5000
18 - With: compare and get constants that equal stmt numbers using with
stmt s; constant c;
Select s with s.stmt# = c.value
10, 11, 22
5000
19 - With: tuple and with for same variable name pairs
variable v, v1;
Select <v, v1> with v.varName = v1.varName
VAR0 VAR0,VAR1 VAR1,VAR10 VAR10,VAR11 VAR11,VAR12 VAR12,VAR13 VAR13,VAR2 VAR2,VAR3 VAR3,VAR4 VAR4,VAR5 VAR5,VAR6 VAR6,VAR7 VAR7,VAR8 VAR8,VAR9 VAR9
5000
20 - With: get all procedure names using with
procedure p, p1;
Select p with p.procName = p1.procName
PROC1,PROC2,PROC3,PROC4,PROC5
5000
